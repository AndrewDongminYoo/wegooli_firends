// 🐦 Flutter imports:
import 'package:flutter/material.dart';

// 🌎 Project imports:
import '/core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          '$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner');
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          '$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner');
    }
    //return theme from map

    final colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(26.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray700,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: colorScheme.primary,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray30033,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 12.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 50.fSize,
          fontFamily: 'CookieRun',
          fontWeight: FontWeight.w900,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 32.fSize,
          fontFamily: 'Jalnan',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 26.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 12.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 20.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 14.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0xFFFFE041),
    primaryContainer: Color(0xFF3A3C42),
    secondary: Color(0xFF3A3C42),
    secondaryContainer: Color(0xFFF8C788),
    tertiary: Color(0xFF3A3C42),
    tertiaryContainer: Color(0xFFF8C788),

    // Background colors
    background: Color(0xFF3A3C42),

    // Surface colors
    surface: Color(0xFF3A3C42),
    surfaceTint: Color(0xFF222222),
    surfaceVariant: Color(0xFFF8C788),

    // Error colors
    error: Color(0xFF222222),
    errorContainer: Color(0xFF82838D),
    onError: Color(0xFFC4C4C4),
    onErrorContainer: Color(0xFF23211F),

    // On colors(text colors)
    onBackground: Color(0xFFFFFFFF),
    onInverseSurface: Color(0xFFC4C4C4),
    onPrimary: Color(0xFF222222),
    onPrimaryContainer: Color(0xFFFFFFFF),
    onSecondary: Color(0xFFFFFFFF),
    onSecondaryContainer: Color(0xFF222222),
    onTertiary: Color(0xFFFFFFFF),
    onTertiaryContainer: Color(0xFF222222),

    // Other colors
    outline: Color(0xFF222222),
    outlineVariant: Color(0xFF3A3C42),
    scrim: Color(0xFF3A3C42),
    shadow: Color(0xFF222222),

    // Inverse colors
    inversePrimary: Color(0xFF3A3C42),
    inverseSurface: Color(0xFF222222),

    // Pending colors
    onSurface: Color(0xFFFFFFFF),
    onSurfaceVariant: Color(0xFF222222),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA20033 => const Color(0xFFFFFF7C);

  // Black
  Color get black900 => const Color(0xFF000000);

  // BlueGrayf
  Color get blueGray1007f => const Color(0x7FD9D9D9);

  // BlueGray
  Color get blueGray200 => const Color(0xFFB0B2BC);
  Color get blueGray300 => const Color(0xFF8A91A8);
  Color get blueGray30033 => const Color(0x33A4A8AF);
  Color get blueGray400 => const Color(0xFF888888);
  Color get blueGray50 => const Color(0xFFECF0F0);
  Color get blueGray600 => const Color(0xFF4D598D);
  Color get blueGray700 => const Color(0xFF464A70);
  Color get blueGray900 => const Color(0xFF323232);
  Color get blueGray90001 => const Color(0xFF333333);

  // DeepOrange
  Color get deepOrangeA200 => const Color(0xFFFF7034);

  // DeepPurple
  Color get deepPurpleA200 => const Color(0xFF7850E9);
  Color get deepPurpleA20001 => const Color(0xFF7B67F4);
  Color get deepPurpleA20002 => const Color(0xFF6154F7);
  Color get deepPurpleA20003 => const Color(0xFF7A66F4);

  // Gray
  Color get gray100 => const Color(0xFFF3F3F6);
  Color get gray10001 => const Color(0xFFF3F3F3);
  Color get gray10002 => const Color(0xFFF6F7F7);
  Color get gray200 => const Color(0xFFEEEEEE);
  Color get gray20001 => const Color(0xFFE8E8E8);
  Color get gray300 => const Color(0xFFE6E6E6);
  Color get gray400 => const Color(0xFFCACACA);
  Color get gray40001 => const Color(0xFFB9BCC3);
  Color get gray40002 => const Color(0xFFBDBDBD);
  Color get gray50 => const Color(0xFFF8F8F8);
  Color get gray500 => const Color(0xFF8F9199);
  Color get gray50001 => const Color(0xFF91969D);
  Color get gray50002 => const Color(0xFF979797);
  Color get gray50003 => const Color(0xFF91959D);
  Color get gray50004 => const Color(0xFF8E9199);
  Color get gray600 => const Color(0xFF858585);
  Color get gray60001 => const Color(0xFF686A71);
  Color get gray700 => const Color(0xFF666666);
  Color get gray70001 => const Color(0xFF5D5D5D);
  Color get gray70002 => const Color(0xFF5B5B5B);
  Color get gray800 => const Color(0xFF474747);

  // Green
  Color get green500 => const Color(0xFF38DD66);
  Color get greenA400 => const Color(0xFF1DD479);
  Color get greenA700 => const Color(0xFF1DF433);

  // Indigo
  Color get indigo50 => const Color(0xFFE2E8F6);

  // LightBlue
  Color get lightBlue50 => const Color(0xFFE5FAFF);

  // Red
  Color get red600 => const Color(0xFFF41D1D);
  Color get red60001 => const Color(0xFFDB4646);
  Color get red700 => const Color(0xFFE82121);
  Color get redA700 => const Color(0xFFFF0000);

  // Yellow
  Color get yellow100 => const Color(0xFFFFF2CF);
  Color get yellow300 => const Color(0xFFFFF96D);
  Color get yellow600 => const Color(0xFFFFDC27);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
