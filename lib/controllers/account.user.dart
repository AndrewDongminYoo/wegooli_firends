// üê¶ Flutter imports:
import 'package:flutter/material.dart';

// üì¶ Package imports:
import 'package:dio/dio.dart';
import 'package:get/get.dart';

// üåé Project imports:
import '/core/app_export.dart';

class UserController extends GetxController {
  final wegooli = WegooliFriends.client;
  static UserController get to => Get.isRegistered<UserController>()
      ? Get.find<UserController>()
      : Get.put(UserController());
  TextEditingController primaryAddress = TextEditingController();
  TextEditingController detailAddress = TextEditingController();
  TextEditingController emailAddress = TextEditingController();
  TextEditingController rePassword = TextEditingController();
  TextEditingController inviteCode = TextEditingController();
  TextEditingController username = TextEditingController();
  TextEditingController password = TextEditingController();
  TextEditingController postCode = TextEditingController();
  TextEditingController nickname = TextEditingController();
  TextEditingController fullName = TextEditingController();
  TextEditingController birthDay = TextEditingController();
  TextEditingController socialId = TextEditingController();
  TextEditingController pinCodes = TextEditingController();
  TextEditingController phoneNum = TextEditingController();

  SelectionPopupModel? phoneCarriers;
  List<SelectionPopupModel> telecoms = [
    SelectionPopupModel(id: 011, title: "SKT"),
    SelectionPopupModel(id: 016, title: "KT"),
    SelectionPopupModel(id: 019, title: "LG"),
  ];

  Rx<UserDto> _currentUser = UserDto().obs;
  Rx<UserDto> get currentUser => _currentUser;
  set currentUser(Rx<UserDto> value) {
    _currentUser = value;
  }

  RxList<TeamAccountModel> _members = RxList<TeamAccountModel>([]);
  RxList<TeamAccountModel> get members => _members;
  set members(RxList<TeamAccountModel> value) {
    _members = value;
  }

  RxList<TeamAccountConnectionResponse> _teams =
      RxList<TeamAccountConnectionResponse>([]);
  RxList<TeamAccountConnectionResponse> get teams => _teams;
  set teams(RxList<TeamAccountConnectionResponse> value) {
    _teams = value;
  }

  TeamCarConnection _carConnection = TeamCarConnection();
  TeamCarConnection get carConnection => _carConnection;
  set carConnection(TeamCarConnection value) {
    _carConnection = value;
  }

  RxBool isAuthenticated = false.obs;
  RxBool isShowPassword = false.obs;
  RxBool isShowConfirmPassword = false.obs;
  RxBool isWaitingOtpCode = false.obs;
  RxBool verifyCodeExpire = false.obs;

  // var api = wegooli.getUserControllerApi();
  // await api.checkId();
  // await api.generateToken();
  // await api.getUserDetail();
  // await api.login();
  // await api.logOut();
  // await api.selectAccount();
  // await api.selectMember();
  // await api.selectUserList();
  // await api.signIn();
  // await api.signOut();
  // await api.signup();
  // await api.updateUser();

  bool get isValidatedPhone {
    // TODO: Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ù Î°úÏßÅÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.
    return true;
  }

  DateTime verificaticonExpireTime() {
    return DateTime.now().add(Duration(minutes: 3));
  }

  void sendVerificationCode() {
    if (phoneCarriers != null && phoneNum.text.isNotEmpty) {
      isWaitingOtpCode.value = true;
      print('Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä Î∞úÏÜ°ÎêòÏóàÏäµÎãàÎã§.');
      // TODO: Ìú¥ÎåÄÌè∞ Ïù∏Ï¶ù Î°úÏßÅÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.
      // Ïà´Ïûê nÍ∞ú Î¶¨ÌÑ¥ÌïòÎäî ÎèôÏûë ÏÑúÎ≤ÑÏóêÏÑú Ïã§Ìñâ.
      // Ï†ïÌôïÌïú Ïà´Ïûê ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Î≥¥Í¥ÄÌïòÍ≥† ÏûàÍ±∞ÎÇò,
      // ÏÑúÎ≤ÑÏóêÏÑúÎßå Í∞ÄÏßÄÍ≥† ÏûàÎã§Í∞Ä ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Ïù∏Ï¶ù ÌôïÏù∏ ÏãúÏóê ÎπÑÍµê Ï≤òÎ¶¨
    } else {
      Get.dialog(Text('Ïñ¥Î¶ºÎèÑÏóÜÎã§'));
    }
  }

  void verificaticonIsExpired() {
    print('verificationCodeHasExpired called!!!');
    verifyCodeExpire.value = true;
    // TODO: Îã§Ïùå Î°úÏßÅÎì§ Ïã§Ìñâ
    // 1. Í∏∞Ï°¥ Ïù∏Ï¶ùÎ≤àÌò∏ ÏΩîÎìú Î¨¥Ìö®Ìôî (ÏÑúÎ≤ÑÏóê ÌÉÄÏûÑÏïÑÏõÉ Ï†ÑÎã¨)
    // 2. ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º Ï∞ΩÏúºÎ°ú ÌÉÄÏûÑÏïÑÏõÉ ÏÇ¨Ïã§ ÏïåÎ¶º. Ïû¨Î∞úÏÜ° Î≤ÑÌäº Ïã§Ìñâ Ïú†ÎèÑ.
    // 3. Ïû¨Î∞úÏÜ° Î≤ÑÌäº Ïã§Ìñâ ÏãúÍπåÏßÄ Ïù∏ÌíãÏ∞Ω ÎπÑÌôúÏÑ±ÌôîÎ•º ÌÜµÌï¥ ÎçîÎ∏î Ï†ÑÏÜ°ÏùÑ ÏòàÎ∞©Ìï®.
  }

  void setDropdownItem(SelectionPopupModel value) {
    print('Selected Drop down value ==> ${value.title}');
    phoneCarriers = value;
  }

  bool get isValid =>
      postCode.text.length > 0 &&
      primaryAddress.text.length > 0 &&
      detailAddress.text.length > 0 &&
      emailAddress.text.isEmail &&
      password.text.length > 0 &&
      nickname.text.length > 0 &&
      rePassword.text.length > 0 &&
      (password.text == rePassword.text);

  @override
  void onClose() {
    super.onClose();
    fullName.dispose();
    birthDay.dispose();
    socialId.dispose();
    phoneNum.dispose();
    pinCodes.dispose();
    username.dispose();
    postCode.dispose();
    primaryAddress.dispose();
    detailAddress.dispose();
    emailAddress.dispose();
    password.dispose();
    rePassword.dispose();
    nickname.dispose();
  }

  Future<void> authorize() async {
    final api = wegooli.getUserControllerApi();
    try {
      print('user.username: ${username.text}\nuser.password: ${password.text}');
      final response =
          await api.login(id: username.text, password: password.text);
      print('response : ${response}');
      Result? result = response.data?.result;
      String bearerToken = '';
      String token = '';
      if (result == null || result.token == null) {
        print('`login()` Î∞òÌôòÍ∞í: $result, ${response.data?.resultCode}');
        Get.dialog(Center(
            child: Assets.lotties.xInCircle.lottie(height: 250, width: 250)));
        isAuthenticated.value = false;
        throw CustomException('Î°úÍ∑∏Ïù∏ Ïã§Ìå®');
      } else {
        bearerToken = result.token as String;
        // BEARER prefix Î∂ÑÎ¶¨.
        token = bearerToken.split(' ').last;
      }
      print('token: ${token}');
      // BEARER prefix Ï†úÍ±∞
      var payload = JwtDecoder.decode(token);
      print(
          'payload: ${payload}'); //'{"name": "My Awesome App", "iat": 1548094400}'
      currentUser.value = UserDto.fromJson(payload);
      if (JwtDecoder.isExpired(token)) {
        print('‚ùå ÎßåÎ£åÎêú ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.');
        isAuthenticated.value = false;

        /// refreshToken API Call!!
      } else {
        print('‚úÖ Ïú†Ìö®Ìïú ÌÜ†ÌÅ∞ÏûÖÎãàÎã§.');
        isAuthenticated.value = true;
        PrefUtils.storage.setToken(token);
        await findMembers();
        return;
      }
    } on DioException catch (e) {
      isAuthenticated.value = false;
      print(switch (e.type) {
        DioExceptionType.connectionError => e.message ?? "Ïó∞Í≤∞ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
        DioExceptionType.connectionTimeout =>
          e.message ?? 'ÏöîÏ≤≠ Ïó∞Í≤∞Ïù¥ 5000msÎ≥¥Îã§ Ïò§Îûò Í±∏Î†∏ÏäµÎãàÎã§.',
        DioExceptionType.sendTimeout =>
          e.message ?? 'ÏöîÏ≤≠Ïù¥ Îç∞Ïù¥ÌÑ∞Î•º Ï†ÑÏÜ°ÌïòÎäî Îç∞ timeout Î≥¥Îã§ Ïò§Îûò Í±∏Î†∏ÏäµÎãàÎã§.',
        DioExceptionType.receiveTimeout =>
          e.message ?? 'Îç∞Ïù¥ÌÑ∞Î•º Î∞õÎäî Îç∞ 3000ms Î≥¥Îã§ Ïò§Îûò Í±∏Î†∏ÏäµÎãàÎã§.',
        DioExceptionType.badCertificate =>
          e.message ?? 'ÏöîÏ≤≠Ïóê ÏûòÎ™ªÎêú Ïù∏Í∞Ä ÏΩîÎìúÎ•º ÏÇ¨Ïö©ÌñàÏäµÎãàÎã§.',
        DioExceptionType.badResponse => e.message ?? 'ÏöîÏ≤≠ÏóêÏÑú ÏûòÎ™ªÎêú ÏÉÅÌÉú ÏΩîÎìúÎ•º Î∞òÌôòÌñàÏäµÎãàÎã§.',
        DioExceptionType.cancel => e.message ?? 'ÏöîÏ≤≠Ïù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.',
        DioExceptionType.unknown =>
          'message: ${e.message}\nerror: ${e.error}\ntrace: ${e.stackTrace}',
      });
      print("`login()` Ìò∏Ï∂ú Ï§ë DioException Î∞úÏÉù: $e\n");
    } on Exception catch (e) {
      isAuthenticated.value = false;
      print("`login()` Ìò∏Ï∂ú Ï§ë Exception Î∞úÏÉù: $e\n");
    }
  }

  Future<void> findMembers() async {
    final api = wegooli.getTeamAccountConnectionControllerApi();
    final response = await api.selectTeamAccountList();
    print('response : $response');
    List<TeamAccountConnectionResponse>? teamList = response.data;
    if (teamList != null && teamList.isNotEmpty) {
      teams(teamList);
      // NOTE: ÌòÑÏû¨Îäî TeamÏù¥ 1Í∞úÎßå Ï°¥Ïû¨ÌïúÎã§Í≥† Í∞ÄÏ†ïÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ï≤´Î≤àÏß∏ Team Ï†ïÎ≥¥Î°úÎßå Ïó∞Í≤∞ÌïúÎã§.
      // teams.first.account
      //     ?.forEach((it) => !members.contains(it) ? members.add(it) : null);
      List<TeamAccountModel>? accountList = teams.first.account;
      if (accountList != null && accountList.isNotEmpty) {
        members(teams.first.account!);
      }
    }
    print('members : ${members.toString()}');
  }

  void logOut() {
    wegooli.getUserControllerApi().logOut();
  }
}
