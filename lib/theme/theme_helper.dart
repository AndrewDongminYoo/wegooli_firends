// üê¶ Flutter imports:
import 'package:flutter/material.dart';

// üì¶ Package imports:
import 'package:get/get.dart';

// üåé Project imports:
import '/core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    // throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    // return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    // throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    // return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(26),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(colorScheme.primary),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        checkColor:
            MaterialStateProperty.all<Color>(colorScheme.onPrimaryContainer),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(15),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(12),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w400,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(16),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(50),
          fontFamily: FontFamily.cookieRun,
          fontWeight: FontWeight.w900,
        ),
        bodyLarge: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: getFontSize(16),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.red600,
          fontSize: getFontSize(14),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.blueGray900,
          fontSize: getFontSize(12),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: getFontSize(24),
          fontFamily: FontFamily.pretendard,
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0xFFFF0000), // 'red'
    error: Color(0xFF222222), // 'mineShaft'
    errorContainer: Color(0xFF82838D), // 'waterloo'
    inversePrimary: Color(0xFFFF0000), // 'red'
    inverseSurface: Color(0xFF222222), // 'mineShaft'
    onBackground: Color(0xFFFFFFFF), // 'white'
    onError: Color(0xFFFFCC08), // 'supernova'
    onErrorContainer: Color(0xFF222222), // 'mineShaft'
    onInverseSurface: Color(0xFFFFCC08), // 'supernova'
    onPrimary: Color(0xFF222222), // 'mineShaft'
    onPrimaryContainer: Color(0xFFFFFFFF), // 'white'
    onSecondary: Color(0xFFFFFFFF), // 'white'
    onSecondaryContainer: Color(0xFF222222), // 'mineShaft'
    onSurface: Color(0xFFFFFFFF), // 'white'
    onSurfaceVariant: Color(0xFF222222), // 'mineShaft'
    onTertiary: Color(0xFFFFFFFF), // 'white'
    onTertiaryContainer: Color(0xFF222222), // 'mineShaft'
    outline: Color(0xFF222222), // 'mineShaft'
    outlineVariant: Color(0xFFFF0000), // 'red'
    primary: Color(0xFFFFCC08), // 'supernova'
    primaryContainer: Color(0xFFFF0000), // 'red'
    scrim: Color(0xFFFF0000), // 'red'
    secondary: Color(0xFFFF0000), // 'red'
    secondaryContainer: Color(0xFFB9BCC3), // 'frenchGray'
    shadow: Color(0xFF222222), // 'mineShaft'
    surface: Color(0xFFFF0000), // 'red'
    surfaceTint: Color(0xFF222222), // 'mineShaft'
    surfaceVariant: Color(0xFFB9BCC3), // 'frenchGray'
    tertiary: Color(0xFFFF0000), // 'red'
    tertiaryContainer: Color(0xFFB9BCC3), // 'frenchGray'
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0xFF000000); // 'black'
  // BlueGray
  Color get blueGray1007f => Color(0x7FD9D9D9);
  Color get blueGray30033 => Color(0x33A4A8AF);
  Color get blueGray400 => Color(0xFF888888); // 'gray'
  Color get blueGray900 => Color(0xFF323232); // 'mineShaft'
  // DeepOrange
  Color get deepOrangeA200 => Color(0xFFFF7034); // 'burningOrange'
  // DeepPurple
  Color get deepPurpleA200 => Color(0xFF7850E9); // 'royalBlue'
  // Gray
  Color get gray100 => Color(0xFFF6F7F7); // 'blackHaze'
  Color get gray10001 => Color(0xFFF5F5F5); // 'wildSand'
  Color get gray300 => Color(0xFFE6E6E6); // 'mercury'
  Color get gray400 => Color(0xFFCACACA); // 'silver'
  Color get gray500 => Color(0xFF8F9199); // 'manatee'
  Color get gray50001 => Color(0xFF91969D); // 'manatee'
  Color get gray50002 => Color(0xFF91959D); // 'manatee'
  Color get gray50003 => Color(0xFF8E9199); // 'manatee'
  Color get gray50004 => Color(0xFF979797); // 'dustyGray'
  Color get gray600 => Color(0xFF858585); // 'gray'
  Color get gray700 => Color(0xFF666666); // 'doveGray'
  Color get gray800 => Color(0xFF474747); // 'tundora'
  // Green
  Color get green500 => Color(0xFF38DD66); // 'shamrock'
  // Red
  Color get red600 => Color(0xFFDB4646); // 'valencia'
  Color get red700 => Color(0xFFE82121); // 'alizarinCrimson'
  Color get redA700 => Color(0xFFEF1010); // 'redRibbon'
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
